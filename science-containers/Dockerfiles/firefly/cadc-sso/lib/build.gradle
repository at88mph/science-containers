/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'org.opencadc.security.sso'
version = '0.1'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

configurations {
    fireflyJar
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    // Add the javax.servlet-api dependency
    implementation 'javax.servlet:javax.servlet-api:4.0.1'

    //Firefly 
    implementation fileTree(dir: "$buildDir/firefly/jars/build/", include: ['firefly.jar'])
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.3'

    //Testing Dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.15.2'
    testImplementation 'org.mockito:mockito-core:5.15.2'
    testImplementation fileTree(dir: "$buildDir/firefly/jars/build/", include: ['firefly.jar'])
    testImplementation 'org.apache.logging.log4j:log4j-core:2.24.3'
    testImplementation 'org.apache.logging.log4j:log4j-api:2.24.3'
    testImplementation 'javax.websocket:javax.websocket-api:1.1'
    testImplementation sourceSets.main.output
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.11.4')
        }
    }
}

// Configure the jar task to output a jar file
jar {
    archiveBaseName.set('cadc-sso-lib')
    archiveVersion.set(version)
    destinationDirectory.set(file("$buildDir/libs"))
}

spotless {
  java {
    target 'lib/src/*/java/**/*.java'
    // Interpret all files as utf-8
    encoding 'UTF-8'
    // // Only require formatting of files that diff from main
    // ratchetFrom 'origin/main'
    // Use the default importOrder configuration
    importOrder()
    // Remove unused imports
    removeUnusedImports()
    // Google Java Format, Android Open Source Project style which uses 4 spaces for indentation
    palantirJavaFormat('2.50.0').formatJavadoc(true)
    // Format annotations on a single line
    formatAnnotations()
  }
}
check.dependsOn spotlessCheck

tasks.register('cloneFirefly') {
    group = 'build'
    description = 'Clone the Firefly repository from GitHub.'
    doLast {
        def fireflyDir = file("$buildDir/firefly")
        if (!fireflyDir.exists()) {
            println "Cloning Firefly repository..."
            exec {
                commandLine 'git', 'clone', '--depth', '1', 'https://github.com/Caltech-IPAC/firefly.git', '--branch=release-2024.3.5', fireflyDir
            }
        } else {
            println "Firefly repository already exists."
        }
    }
}

tasks.register('buildFireflyJar') {
    group = 'build'
    description = 'Build only the Firefly JAR.'
    dependsOn 'cloneFirefly'
    doLast {
        println "Building Firefly JAR..."
        def fireflyDir = file("$buildDir/firefly")
        exec {
            commandLine 'gradle', ':firefly:jar'
            workingDir fireflyDir
        }
    }
}

tasks.register('linkFireflyJar') {
    group = 'build'
    description = 'Link the Firefly JAR as a dependency.'
    dependsOn 'buildFireflyJar'
    doLast {
        println "Linking Firefly JAR..."
        def jarDir = file("$buildDir/firefly/jars/build/")
        def jarFile = jarDir.listFiles()?.find { it.name == 'firefly.jar' }
        if (jarFile) {
            println "Firefly JAR Confirmed: $jarFile"
        } else {
            throw new GradleException("Firefly JAR not found in $jarDir")
        }
    }
}

tasks.named('build').configure {
    dependsOn 'linkFireflyJar'
}

tasks.named('test').configure {
    dependsOn 'linkFireflyJar'
}

tasks.named('compileJava').configure {
    dependsOn 'linkFireflyJar'
}

tasks.withType(Test).configureEach {
    classpath += sourceSets.main.output
}

tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.jacocoTestReport {
    dependsOn tasks.test
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}